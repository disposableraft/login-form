{"version":3,"sources":["TextInput.tsx","email-exists.ts","SubmitButton.tsx","LoginForm.tsx","App.tsx","index.tsx"],"names":["TextInput","label","props","useField","field","meta","FormControl","isInvalid","Boolean","touched","error","FormLabel","display","htmlFor","name","Input","id","variant","placeholder","Box","pb","FormErrorMessage","data-testid","sleep","ms","Promise","r","setTimeout","emailExists","email","a","test","console","log","SubmitButton","useFormikContext","errors","pt","Button","variantColor","rounded","isFullWidth","isDisabled","noErrors","Object","values","every","v","unTouched","type","FormSchema","object","shape","firstName","string","min","max","required","lastName","value","password","LoginForm","Flex","bg","width","p","w","initialValues","onSubmit","setSubmitting","validationSchema","Stack","spacing","App","justifyContent","alignItems","mt","h","direction","ReactDOM","render","StrictMode","ThemeProvider","theme","CSSReset","document","getElementById"],"mappings":"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","file":"static/js/main.f3586183.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport { Input, FormControl, FormLabel, FormErrorMessage, Box } from \"@chakra-ui/core\";\nimport { useField } from \"formik\";\n\ntype TextInputType = {\n  label: string;\n  name: string;\n  type: string;\n};\n\nconst TextInput: FunctionComponent<TextInputType> = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n\n  return (\n    <FormControl isInvalid={Boolean(meta.touched && meta.error)}>\n      <FormLabel display=\"none\" htmlFor={props.name}>{label}</FormLabel>\n      <Input \n        id={props.name} \n        variant=\"flushed\" \n        placeholder={label} \n        {...field} \n        {...props} \n        />\n        <Box \n          display={Boolean(meta.touched && meta.error) ? 'none' : 'block'}\n          pb=\"17px\"\n        />\n      <FormErrorMessage data-testid={`error-${field.name}`}>\n          {meta.error}\n      </FormErrorMessage>\n    </FormControl>\n  );\n};\n\nexport default TextInput;\n","const sleep = (ms: number) => new Promise((r) => setTimeout(r, ms));\n\nconst emailExists = async (email: string): Promise<boolean> => {\n  await sleep(50);\n  if (/.*@example\\.com/.test(email)) {\n    console.log(`Email (${email}) no exists`);\n    return false;\n  }\n  console.log(`Email (${email}) yes exists`);\n  return true;\n};\n\nexport default emailExists;\n","import React, { FunctionComponent } from \"react\";\nimport { useFormikContext } from \"formik\";\nimport { Box, Button } from \"@chakra-ui/core\";\n\ntype SubmitButtonType = {\n  label: string;\n  name: string;\n};\n\nconst SubmitButton: FunctionComponent<SubmitButtonType> = ({\n  label,\n  ...props\n}) => {\n  const { errors, touched } = useFormikContext();\n  const isDisabled = (): boolean => {\n    const noErrors = Object.values(errors).every((v) => !v);\n    const unTouched = Object.values(touched).every((v) => !v);\n    return noErrors && unTouched;\n  };\n\n  return (\n    <Box pt={4}>\n      <Button\n        variantColor=\"pink\"\n        rounded={20}\n        isFullWidth={true}\n        isDisabled={isDisabled()}\n        data-testid=\"submit\"\n        type=\"submit\"\n      >\n        {label}\n      </Button>\n    </Box>\n  );\n};\n\nexport default SubmitButton;\n","import React, { FunctionComponent } from \"react\";\nimport { string, object } from \"yup\";\nimport { Formik, Form, FormikHelpers } from \"formik\";\nimport TextInput from \"./TextInput\";\nimport emailExists from \"./email-exists\";\nimport { Box, Flex, Stack } from \"@chakra-ui/core\";\nimport SubmitButton from \"./SubmitButton\";\n\ntype Inputs = {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n};\n\nconst FormSchema = object().shape({\n  firstName: string()\n    .min(2, \"Too short\")\n    .max(100, \"Too long!\")\n    .required(\"Required\"),\n  lastName: string()\n    .min(2, \"Too short\")\n    .max(100, \"Too long!\")\n    .required(\"Required\"),\n  email: string()\n    .email(\"Invalid email\")\n    .required(\"Required\")\n    .test(\"does-email-exist\", \"Email exists\", (value) => {\n      if (value && /\\S+@\\S+\\.\\S+/.test(value)) {\n        return emailExists(value);\n      }\n      return false;\n    }),\n  password: string().required(\"Required\"),\n});\n\nconst LoginForm: FunctionComponent = () => {\n  const onSubmit = (values: Inputs, setSubmitting: any) => {\n    console.log(values);\n  };\n\n  return (\n    <Flex\n      data-testid=\"form-login\"\n      bg=\"white\"\n      rounded={10}\n      width={[\"100%\", \"400px\"]}\n    >\n      <Box p={6} w=\"100%\">\n        <Formik\n          initialValues={{\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            password: \"\",\n          }}\n          onSubmit={(\n            values: Inputs,\n            { setSubmitting }: FormikHelpers<Inputs>\n          ) => {\n            onSubmit(values, setSubmitting);\n          }}\n          validationSchema={FormSchema}\n        >\n          <Form>\n            <Stack spacing={4}>\n              <TextInput name=\"firstName\" type=\"text\" label=\"First Name\" />\n              <TextInput name=\"lastName\" type=\"text\" label=\"Last Name\" />\n              <TextInput name=\"email\" type=\"email\" label=\"Email\" />\n              <TextInput name=\"password\" type=\"password\" label=\"Password\" />\n              <SubmitButton label=\"Register\" name=\"submit\" />\n            </Stack>\n          </Form>\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default LoginForm;\n","import React, { FunctionComponent } from \"react\";\nimport { Flex } from \"@chakra-ui/core\";\nimport LoginForm from \"./LoginForm\";\n\nconst App: FunctionComponent = () => (\n  <Flex\n    justifyContent=\"center\"\n    alignItems=\"center\"\n    mt={-12}\n    h=\"100%\"\n    direction=\"column\"\n  >\n    <LoginForm />\n  </Flex>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ThemeProvider, CSSReset, theme } from \"@chakra-ui/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CSSReset />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}