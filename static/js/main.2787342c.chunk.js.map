{"version":3,"sources":["text-input.tsx","register-user.ts","validate-email.ts","login-form.tsx","page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ValidatedIcon","props","errors","Icon","name","color","TextInput","Box","mb","FormControl","isInvalid","FormLabel","fontSize","Text","as","text","pl","message","InputGroup","Input","borderWidth","rounded","backgroundColor","variant","onBlur","type","ref","register","validate","validator","value","error","size","children","registerUser","values","a","payload","campaignUuid","data","firstName","lastName","email","password","req","Request","headers","method","body","JSON","stringify","fetch","then","res","ok","json","Error","status","console","debug","catch","err","validateEmail","LoginForm","React","setMessage","useForm","handleSubmit","formState","trigger","watchAllFields","watch","onSubmit","registration","emailValidator","String","validEmail","Object","test","fontStyle","textAlign","Button","isDisabled","watchedFields","keys","length","every","s","isSubmitDisabled","_hover","bg","cursor","border","isFullWidth","isLoading","isSubmitting","Page","margin","maxW","mt","App","ThemeProvider","theme","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.2787342c.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  Icon,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Text,\n} from \"@chakra-ui/core\";\n\nconst ValidatedIcon = (props: { errors: boolean}) => {\n  if (props.errors) {\n    return <Icon name=\"warning\" color=\"red.500\" />;\n  }\n  return null;\n};\n\ntype TextInputType = {\n  errors: any,\n  name: string,\n  text: string,\n  type: string,\n  register?: any,\n  validator?: any,\n  onBlur?: any\n}\n\nexport default function TextInput(props: TextInputType) {\n  const validateField = (value: string): string | boolean => {\n    let error;\n    if (!value) {\n      error = \"This field is required\";\n    }\n    return error || true;\n  };\n\n  const errors = (): boolean => {\n    return props.errors ? true : false;\n  };\n\n  return (\n    <Box mb={4}>\n      <FormControl isInvalid={errors()}>\n        <FormLabel fontSize=\"sm\" color=\"#432CB3\">\n          <Text as=\"span\">{props.text}</Text>\n          <Text pl=\"3\" as=\"span\" color=\"red.500\">\n            {props.errors && props.errors.message}\n          </Text>\n        </FormLabel>\n        <InputGroup>\n          <Input\n            borderWidth=\"1\"\n            rounded=\"none\"\n            backgroundColor=\"#F1F1F7\"\n            variant=\"filled\"\n            onBlur={props.onBlur}\n            type={props.type}\n            name={props.name}\n            ref={props.register({ validate: props.validator || validateField })}\n            size=\"lg\"\n          />\n          <InputRightElement children={<ValidatedIcon errors={errors()} />} />\n        </InputGroup>\n      </FormControl>\n    </Box>\n  );\n}\n","type Inputs = {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n};\n\nexport default async function registerUser(values: Inputs) {\n  const payload = {\n    campaignUuid: \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\n    data: {\n      firstName: values.firstName,\n      lastName: values.lastName,\n      email: values.email,\n      password: values.password,\n    },\n  };\n  const req = new Request(\"https://api.raisely.com/v3/signup\", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"POST\",\n    body: JSON.stringify(payload),\n  });\n  return fetch(req)\n    .then((res) => {\n      return res.ok ? res.json() : new Error(`Error: ${res.status}; ${res}`);\n    })\n    .then((res) => {\n      console.debug(res);\n      return res;\n    })\n    .catch((err) => {\n      console.error(err);\n    });\n}\n","export default async function validateEmail(email: string) {\n  const payload = {\n    campaignUuid: \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\n    data: {\n      email: email,\n    },\n  };\n  const req = new Request(\"https://api.raisely.com/v3/check-user \", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"POST\",\n    body: JSON.stringify(payload),\n  });\n  return fetch(req)\n    .then((res) => {\n      return res.ok ? res.json() : new Error(`Error: ${res.status}; ${res}`);\n    })\n    .then((res) => {\n      console.debug(res);\n      return res;\n    })\n    .catch((err) => {\n      console.error(err);\n    });\n}\n","import * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Button, Text } from \"@chakra-ui/core\";\nimport TextInput from \"./text-input\";\nimport registerUser from \"./register-user\";\nimport validateEmail from \"./validate-email\";\n\ntype Inputs = {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n};\n\nexport default function LoginForm() {\n  const [message, setMessage] = React.useState(\"\");\n  const { register, handleSubmit, formState, errors, trigger, watch } = useForm<\n    Inputs\n  >();\n\n  const watchAllFields: Inputs = watch();\n\n  const onSubmit = async (values: Inputs) => {\n    const registration = await registerUser(values);\n    setMessage(registration.message);\n  };\n\n  const isSubmitDisabled = (watchedFields: object): boolean => {\n    if (Object.keys(watchedFields).length === 0) {\n      return true;\n    }\n    const hasValue = (s: string): boolean => {\n      return s.length > 0;\n    };\n    return !Object.values(watchedFields).every(hasValue);\n  };\n\n  const emailValidator = async (email: string) => {\n    let error: string = String();\n    if (!email) {\n      error = \"Email required\";\n    }\n\n    let validEmail: { data: { status: string } } = Object();\n    \n    if (/\\S+@\\S+\\.\\S+/.test(email)) {\n      validEmail = await validateEmail(email);\n    } else {\n      error = \"Please enter a valid email\";\n    }\n\n    if (validEmail.data && validEmail.data.status === \"EXISTS\") {\n      error = `Email ${email} exists`;\n    }\n\n    return error || true;\n  };\n\n  return (\n    <div>\n      {message ? (\n        <Text color=\"262861\" fontStyle=\"italic\" textAlign=\"center\">\n          {message}\n        </Text>\n      ) : (\n        \"\"\n      )}\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <TextInput\n          name=\"email\"\n          text=\"Email\"\n          type=\"email\"\n          errors={errors.email}\n          register={register}\n          validator={emailValidator}\n          onBlur={() => trigger(\"email\")}\n        />\n\n        <TextInput\n          name=\"password\"\n          text=\"Password\"\n          type=\"password\"\n          errors={errors.password}\n          register={register}\n        />\n\n        <TextInput\n          name=\"firstName\"\n          text=\"First Name\"\n          type=\"text\"\n          errors={errors.firstName}\n          register={register}\n        />\n\n        <TextInput\n          name=\"lastName\"\n          text=\"Last Name\"\n          type=\"text\"\n          errors={errors.lastName}\n          register={register}\n        />\n\n        <Button\n          isDisabled={isSubmitDisabled(watchAllFields) || !!errors.email}\n          _hover={{ bg: \"#432CB3\", cursor: \"pointer\" }}\n          color=\"#FFF\"\n          bg=\"#432CB3\"\n          border=\"1px #CCC\"\n          rounded=\"20px\"\n          isFullWidth={true}\n          type=\"submit\"\n          isLoading={formState.isSubmitting}\n        >\n          Register\n        </Button>\n      </form>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport LoginForm from \"./login-form\";\nimport { Box, Text } from \"@chakra-ui/core\";\n\nconst Page = () => {\n  return (\n    <Box margin=\"auto\" maxW=\"650px\">\n      <Box mt={8}>\n        <Text textAlign=\"center\" color=\"#432CB3\" as=\"h2\">\n          Welcome to Raisley\n        </Text>\n        <LoginForm />\n      </Box>\n    </Box>\n  );\n};\n\nexport default Page;\n","import * as React from \"react\";\nimport { ThemeProvider, theme } from \"@chakra-ui/core\";\nimport Page from \"./page\";\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Page />\n    </ThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}