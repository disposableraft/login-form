{"version":3,"sources":["text-input.tsx","register-user.ts","validate-email.ts","login-form.tsx","page.tsx","App.tsx","index.tsx"],"names":["ValidatedIcon","props","errors","Icon","name","color","TextInput","Box","mb","FormControl","isInvalid","FormLabel","fontSize","Text","as","text","pl","message","InputGroup","Input","borderWidth","rounded","backgroundColor","variant","onBlur","type","ref","register","validate","validator","value","error","size","children","registerUser","values","a","payload","campaignUuid","data","firstName","lastName","email","password","req","Request","headers","method","body","JSON","stringify","fetch","then","res","json","console","debug","catch","err","validateEmail","ok","Error","status","LoginForm","React","setMessage","useForm","handleSubmit","formState","trigger","watchAllFields","watch","onSubmit","registration","emailValidator","String","validEmail","Object","test","fontStyle","textAlign","Button","isDisabled","watchedFields","keys","length","every","s","isSubmitDisabled","_hover","bg","cursor","border","isFullWidth","isLoading","isSubmitting","Page","margin","maxW","mt","App","ThemeProvider","theme","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06b67932.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  Icon,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Text,\n} from \"@chakra-ui/core\";\n\nconst ValidatedIcon = (props: { errors: boolean}) => {\n  if (props.errors) {\n    return <Icon name=\"warning\" color=\"red.500\" />;\n  }\n  return null;\n};\n\ntype TextInputType = {\n  errors: any,\n  name: string,\n  text: string,\n  type: string,\n  register?: any,\n  validator?: any,\n  onBlur?: any\n}\n\n// This component provides a generic wrapper for form inputs.\n// It supports a default validator, which assumes any field is required.\n// It also supports custom validators, which is used by the email input.\n\nexport default function TextInput(props: TextInputType) {\n  const validateField = (value: string): string | boolean => {\n    let error;\n    if (!value) {\n      error = \"This field is required\";\n    }\n    return error || true;\n  };\n\n  const errors = (): boolean => {\n    return props.errors ? true : false;\n  };\n\n  return (\n    <Box mb={4}>\n      <FormControl isInvalid={errors()}>\n        <FormLabel fontSize=\"sm\" color=\"#432CB3\">\n          <Text as=\"span\">{props.text}</Text>\n          <Text pl=\"3\" as=\"span\" color=\"red.500\">\n            {props.errors && props.errors.message}\n          </Text>\n        </FormLabel>\n        <InputGroup>\n          <Input\n            borderWidth=\"1\"\n            rounded=\"none\"\n            backgroundColor=\"#F1F1F7\"\n            variant=\"filled\"\n            onBlur={props.onBlur}\n            type={props.type}\n            name={props.name}\n            ref={props.register({ validate: props.validator || validateField })}\n            size=\"lg\"\n          />\n          <InputRightElement children={<ValidatedIcon errors={errors()} />} />\n        </InputGroup>\n      </FormControl>\n    </Box>\n  );\n}\n","type Inputs = {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n};\n\nexport default async function registerUser(values: Inputs) {\n  const payload = {\n    campaignUuid: \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\n    data: {\n      firstName: values.firstName,\n      lastName: values.lastName,\n      email: values.email,\n      password: values.password,\n    },\n  };\n  const req = new Request(\"https://api.raisely.com/v3/signup\", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"POST\",\n    body: JSON.stringify(payload),\n  });\n  return fetch(req)\n    .then((res) => res.json())\n    .then((data) => {\n      console.debug(data);\n      return data;\n    })\n    .catch((err) => {\n      console.error(err);\n      return err;\n    });\n}\n","export default async function validateEmail(email: string) {\n  const payload = {\n    campaignUuid: \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\n    data: {\n      email: email,\n    },\n  };\n  const req = new Request(\"https://api.raisely.com/v3/check-user \", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"POST\",\n    body: JSON.stringify(payload),\n  });\n  return fetch(req)\n    .then((res) => {\n      return res.ok ? res.json() : new Error(`Error: ${res.status}; ${res}`);\n    })\n    .then((res) => {\n      console.debug(res);\n      return res;\n    })\n    .catch((err) => {\n      console.error(err);\n    });\n}\n","import * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Button, Text } from \"@chakra-ui/core\";\nimport TextInput from \"./text-input\";\nimport registerUser from \"./register-user\";\nimport validateEmail from \"./validate-email\";\n\n/**\n * LoginForm is the main component in this app. \n * \n * Features include: \n *   - asynchronous email validation; \n *   - basic form validations for an email string and checking that inputs contain \n *     at least one character;\n *   - a disabled submit button until all form validations pass; success and error messages; \n *   - and responsive design.\n * \n * One edge case I discovered is when an email has been submitted, but an account\n * has not been created (?). In this case, the async email validation passes (that is,\n * the server sends an \"OK\" and not an \"EXISTS\"), but when registration is submitted,\n * the server response with \"This email (foo@bar.com) address has already been \n * registered. Have you tried logging in?\" I found this message from the server\n * helpful and displayed it to the user in a message above the form.\n * \n * There are many improvements that could be made. The first I would make would be to \n * redirect the successful registrant to the next page. Others would be to expand\n * error handling. And consider the flow of data.\n */\n\ntype Inputs = {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n};\n\nexport default function LoginForm() {\n  const [message, setMessage] = React.useState(\"\");\n  const { register, handleSubmit, formState, errors, trigger, watch } = useForm<\n    Inputs\n  >();\n\n  const watchAllFields: Inputs = watch();\n\n  const onSubmit = async (values: Inputs) => {\n    const registration = await registerUser(values);\n    if (registration.errors) {\n      // Yolo. Here I just take the first error message.\n      // Handling multiple errors here would make the login more robust.\n      // I could see breaking this out into its own error handling component.\n      setMessage(registration.errors[0].message);\n    } else {\n      setMessage(registration.message);\n    }\n  };\n\n  const isSubmitDisabled = (watchedFields: object): boolean => {\n    // Disable submit when none of the fields contain values\n    if (Object.keys(watchedFields).length === 0) {\n      return true;\n    }\n    const hasValue = (s: string): boolean => {\n      return s.length > 0;\n    };\n    // Check if all the fields have values and return the opposite.\n    return !Object.values(watchedFields).every(hasValue);\n  };\n\n  const emailValidator = async (email: string) => {\n    let error: string = String();\n    if (!email) {\n      error = \"Email required\";\n    }\n\n    let validEmail: { data: { status: string } } = Object();\n    // A simple email test: Strings containing multiple periods and at-signs will pass.\n    if (/\\S+@\\S+\\.\\S+/.test(email)) {\n      validEmail = await validateEmail(email);\n    } else {\n      error = \"Please enter a valid email\";\n    }\n\n    if (validEmail.data && validEmail.data.status === \"EXISTS\") {\n      error = `Email ${email} exists`;\n    }\n\n    return error || true;\n  };\n\n  return (\n    <div>\n      {message ? (\n        <Text color=\"262861\" fontStyle=\"italic\" textAlign=\"center\">\n          {message}\n        </Text>\n      ) : (\n        \"\"\n      )}\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <TextInput\n          name=\"email\"\n          text=\"Email\"\n          type=\"email\"\n          errors={errors.email}\n          register={register}\n          validator={emailValidator}\n          // Trigger emailValidator when user exits the input\n          onBlur={() => trigger(\"email\")}\n        />\n\n        <TextInput\n          name=\"password\"\n          text=\"Password\"\n          type=\"password\"\n          errors={errors.password}\n          register={register}\n        />\n\n        <TextInput\n          name=\"firstName\"\n          text=\"First Name\"\n          type=\"text\"\n          errors={errors.firstName}\n          register={register}\n        />\n\n        <TextInput\n          name=\"lastName\"\n          text=\"Last Name\"\n          type=\"text\"\n          errors={errors.lastName}\n          register={register}\n        />\n\n        {/* Disabling the submit button, given the correct conditions was a fun challenge. */}\n\n        <Button\n          isDisabled={isSubmitDisabled(watchAllFields) || !!errors.email}\n          _hover={{ bg: \"#432CB3\", cursor: \"pointer\" }}\n          color=\"#FFF\"\n          bg=\"#432CB3\"\n          border=\"1px #CCC\"\n          rounded=\"20px\"\n          isFullWidth={true}\n          type=\"submit\"\n          isLoading={formState.isSubmitting}\n        >\n          Register\n        </Button>\n      </form>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport LoginForm from \"./login-form\";\nimport { Box, Text } from \"@chakra-ui/core\";\n\n// Having a page component is perhaps decomposing too much for this exercise,\n// but I think it demonstrates how I would go about organizing components irl.\n\nconst Page = () => {\n  return (\n    <Box margin=\"auto\" maxW=\"650px\">\n      <Box mt={8}>\n        <Text textAlign=\"center\" color=\"#432CB3\" as=\"h2\">\n          Welcome to Raisely\n        </Text>\n        <LoginForm />\n      </Box>\n    </Box>\n  );\n};\n\nexport default Page;\n","import * as React from \"react\";\nimport { ThemeProvider, theme } from \"@chakra-ui/core\";\nimport Page from \"./page\";\n\n// Here I add the theme provider and the page component.\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Page />\n    </ThemeProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}